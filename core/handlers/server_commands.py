import os
import asyncio
from aiogram import Router, Bot, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, FSInputFile, InputMediaPhoto
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest
from contextlib import suppress

from core.controllers.UserController import UserController
from core.controllers.CommandController import CommandController
from core.controllers.ServerController import ServerController
from services.ServerCheckerService import ServerCheckerService
from core.keyboards.inline_pagination import Pagination, paginator

router = Router()
user = UserController()
commands = CommandController()
server_controller = ServerController()
load_checker = ServerCheckerService()

items_per_page = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

@router.callback_query(Pagination.filter(F.action.in_(["prev", "next"])))
async def pagination_handler(call: CallbackQuery, callback_data: Pagination):
    await server_controller._init_server_controller()
    await load_checker.load_server_addresses()
    servers = await server_controller.get_all_servers_list()

    page_num = int(callback_data.page)
    page = page_num - 1 if page_num > 0 else 0

    if callback_data.action == "next":
        page = page_num + 1 if page_num < (len(servers) - 1) else page_num

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    map_name = servers[page][4]
    file_path = f'core/data/images/maps/{map_name}.jpeg'
    default_path = 'core/data/images/maps/def_image.jpeg'

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –¥–ª—è –∫–∞—Ä—Ç—ã
    photo = FSInputFile(file_path) if os.path.isfile(file_path) else FSInputFile(default_path)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
    server_info = (
        f"<b>{servers[page][3]}</b>\n"                      # –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
        f"üó∫Ô∏è {servers[page][4]} | "                         # –ö–∞—Ä—Ç–∞
        f"üë• {servers[page][5]} | "                         # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
        f"üì∂ {servers[page][2]}\n\n"                        # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
        f"üéÆ {servers[page][7]}\n\n"                        # –ò–≥—Ä–∞
        f"üìç<i>{servers[page][9]}</i>\n\n"                  # –¢–µ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞
        f"üåê IP: <code>{servers[page][1]}</code>\n\n"       # IP:PORT
        f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:\n<pre>connect {servers[page][1]}</pre>\n\n"  # –ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–∞—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å
    players_data = servers[page][-1]  # –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    if players_data:
        for player in players_data:
            server_info += f"üü¢ {player['name']} | {player['score']}\n"

    with suppress(TelegramBadRequest):
        await call.message.edit_media(
            media=InputMediaPhoto(media=photo, caption=server_info),
            reply_markup=paginator(page, len(servers))
        )

        await call.message.edit_caption(
            caption=server_info,
            reply_markup=paginator(page, len(servers)),
            parse_mode='html'
        )
        await call.answer()

@router.message(Command('servers'))
async def get_servers(message: Message):
    await server_controller._init_server_controller()
    await load_checker.load_server_addresses()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
    servers = await server_controller.get_all_servers_list()

    map_name = servers[0][4]
    file_path = f'core/data/images/maps/{map_name}.jpeg'
    default_path = 'core/data/images/maps/def_image.jpeg'

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –¥–ª—è –∫–∞—Ä—Ç—ã
    photo = FSInputFile(file_path) if os.path.isfile(file_path) else FSInputFile(default_path)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ
    server_info = (
        f"<b>{servers[0][3]}</b>\n"  # –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
        f"üó∫Ô∏è {servers[0][4]} | "  # –ö–∞—Ä—Ç–∞
        f"üë• {servers[0][5]} | "  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
        f"üì∂ {servers[0][2]}\n\n"
        f"üéÆ {servers[0][7]}\n\n"
        f"üìç<i>{servers[0][9]}</i>\n\n"
        f"üåê IP: <code>{servers[0][1]}</code>\n\n"  # IP:PORT
        f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:\n<pre>connect {servers[0][1]}</pre>\n\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–∞—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å
    players_data = servers[0][-1]  # –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    if players_data:
        for player in players_data:
            server_info += f"üü¢ {player['name']} | {player['score']}\n"

    await message.answer_photo(
        photo=photo,
        caption=server_info,
        reply_markup=paginator(0, len(servers), await user.get_role(message.from_user.id)),
        parse_mode='html'
    )

@router.message(F.text == "üåê –°–µ—Ä–≤–µ—Ä–∞")
async def back_to_profile(message: Message):
    await user._init_user()
    await get_servers(message)
    await user.update_last_activity(message.from_user.id)

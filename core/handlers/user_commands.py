import os, asyncio
from aiogram import Router, F, Bot
from aiogram.types import Message, FSInputFile
from aiogram.filters import CommandStart, Command

from core.controllers.UserController import UserController
from core.controllers.CommandController import CommandController

from core.keyboards.reply_keyboards import main_keyboard
from core.keyboards.inline_keyboards import get_profile_keyboard

from core.middlewares.is_admin import isAdmin

router = Router()
user = UserController()
commands = CommandController()


async def register_commands():
    await commands._init_commands()

    await commands.add_command('start', '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞')
    await commands.add_command('profile', '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
    await commands.add_command('help', '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥')
    await commands.add_command('servers', '–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤')


@router.message(Command('start'))
async def startUp(message: Message):
    await register_commands()
    await user._init_user()

    if await user.get_users_count() == 0:
        await user.create_user(message.from_user.id, message.from_user)
        await user.update_user(message.from_user.id, {'role': 'admin'})
        await user.update_last_activity(message.from_user.id)
        await message.reply(f"–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>!\n–ß—Ç–æ –±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π /help", parse_mode='html', reply_markup=main_keyboard)
    else:
        if not await user.get_user(message.from_user.id):
            await user.create_user(message.from_user.id, message.from_user)
            await user.update_last_activity(message.from_user.id)
            await message.reply(f"–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>!\n–ß—Ç–æ –±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π /help", parse_mode='html', reply_markup=main_keyboard)
        else:
            await user.update_last_activity(message.from_user.id)
            await message.reply(f"C –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º <b>{message.from_user.first_name}</b>!\n", parse_mode='html', reply_markup=main_keyboard)


@router.message(Command('profile'))
async def profile(message: Message, user_id: int = None):
    if message.chat.type == 'private':
        await user._init_user()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await user.get_user(message.from_user.id)

        if message.from_user:
            user_data = await user.get_user(message.from_user.id)

            if user_data:
                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ
                profile_info = (
                    f"<b>ID</b>: {user_data['telegram_id']}\n"
                    f"<b>Username</b>: {user_data.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                    f"<b>–ù–∏–∫ –≤ –∏–≥—Ä–µ</b>: {user_data.get('game_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                    f"<b>SteamID</b>: {user_data.get('steamid', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
                )

                if user_data.get('profile_photo'):
                    photo = user_data.get('profile_photo')
                    await message.answer_photo(photo, caption=profile_info, parse_mode='HTML', reply_markup=get_profile_keyboard())
                else:
                    await message.answer( profile_info, parse_mode='HTML', reply_markup=get_profile_keyboard())

        if user_id:
            user_data = await user.get_user(user_id)

            if user_data:
                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ
                profile_info = (
                    f"<b>ID</b>: {user_data['telegram_id']}\n"
                    f"<b>Username</b>: {user_data.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                    f"<b>–ù–∏–∫ –≤ –∏–≥—Ä–µ</b>: {user_data.get('game_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                    f"<b>SteamID</b>: {user_data.get('steamid', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
                )

                if user_data.get('profile_photo'):
                    photo = user_data.get('profile_photo')
                    await message.answer_photo(photo, caption=profile_info, parse_mode='HTML', reply_markup=get_profile_keyboard())
                else:
                    await message.answer( profile_info, parse_mode='HTML', reply_markup=get_profile_keyboard())


        if user_data is None:
            await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
    else:
        await message.answer("–ß–∞—Å—Ç–∞–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –Ω–µ —Å—Ç–æ–∏—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –µ–µ –≤ –≥—Ä—É–ø–ø–µ! ;)")


@router.message(Command('help'))
async def help(message: Message):
    await commands._init_commands()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    command_list = await commands.get_command_list()
    await message.reply(f"–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n{command_list}")

# !–¢–ï–ö–°–¢–û–í–´–ï –¢–†–ò–ì–ï–†–´
# ?–í–ù–ò–ú–ê–ù–ò–ï –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –≤ —Å–∞–º–æ–º –Ω–∏–∑—É!
@router.message(F.text == "üòé –ü—Ä–æ—Ñ–∏–ª—å")
async def back_to_profile(message: Message):
    await user._init_user()
    await profile(message)
    await user.update_last_activity(message.from_user.id)